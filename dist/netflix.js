class r{constructor(){this.watched=0,this.hadBeenStoped=!1,document.body.insertAdjacentHTML("afterend",'<dialog id="stop-netflix-overlay">This is a dialog.<br><button>Close</button></dialog>'),this.initializeNodeObserver()}initializeNodeObserver(){const e=new MutationObserver(t=>t.forEach(({addedNodes:o})=>o.forEach(i=>{i.querySelector("video")&&(this.mountApp(i.querySelector("video")),e.disconnect())})));e.observe(document.body,{childList:!0,subtree:!0})}mountApp(e){this.player=e,setInterval(()=>{this.isPlaying()&&(this.watched++,console.log("watched triggered"),this.isInTheMiddle()&&this.watched>1&&!this.hadBeenStoped&&(this.showModal(),this.stop(),this.hadBeenStoped=!0))},1e3)}showModal(){const e=document.querySelector("#stop-netflix-overlay");e.querySelector("button").addEventListener("click",()=>{e.close(),this.play()}),e.showModal()}isPlaying(){}isInTheMiddle(){}stop(){}play(){}}class a extends r{constructor(){super()}isPlaying(){return!this.player.paused}stop(){this.player.pause()}play(){this.player.play()}isInTheMiddle(){const e=this.player.duration/2,t=this.player.currentTime;return t+5>e&&t-5<e}}new a;
